#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.3 on Thu Sep 10 15:32:10 2009

import wx
import os
import gdal.osr as osr
import pyproj

# begin wxGlade: extracode
# end wxGlade



class MyDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyDialog.__init__
        kwds["style"] = wx.CAPTION|wx.STAY_ON_TOP
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_1 = wx.StaticText(self, -1, _("Zoom level"))
        self.spin_ctrl_1 = wx.SpinCtrl(self, -1, "19", min=15, max=22)
        self.button_3 = wx.Button(self, -1, _("Help"))
        self.button_2 = wx.Button(self, -1, _("Display"))
        self.button_1 = wx.Button(self, -1, _("Close"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnHelp, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.OnDisplay, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.OnClose, self.button_1)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyDialog.__set_properties
        self.SetTitle(_("Display marked node in Google Maps"))
        self.SetSize((300, 120))
        # end wxGlade


    def __do_layout(self):
        # begin wxGlade: MyDialog.__do_layout
        sizer_1 = wx.FlexGridSizer(2, 1, 0, 0)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.label_1, 0, wx.ALL, 10)
        sizer_2.Add(self.spin_ctrl_1, 0, wx.ALL, 10)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        sizer_3.Add(self.button_3, 0, wx.ALL, 10)
        sizer_3.Add(self.button_2, 0, wx.ALL, 10)
        sizer_3.Add(self.button_1, 0, wx.ALL|wx.ALIGN_RIGHT, 10)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.AddGrowableRow(0)
        sizer_1.AddGrowableCol(0)
        self.Layout()
        # end wxGlade

    def OnDisplay(self, event): # wxGlade: MyDialog.<event_handler>
        # retrieve x,y of marked (main)node
        marking = Visum.Net.Marking
        if marking.ObjectType in [1,5] and marking.Count > 0: # if at least one (main) node is marked...
            markedobj = marking.GetAll[0]                     # ... get the coordinates of the first one
            x = markedobj.AttValue("XCOORD")
            y = markedobj.AttValue("YCOORD")
        else:
            wx.MessageBox(_("Please mark a node or main node before clicking Display."),
                          _("Error"), style=wx.ICON_ERROR)
            return
        # get projection of VISUM model, must be set for coordinate conversion to lat/lon
        visumproj = Visum.Net.NetParameters.AttValue("PROJECTIONDEFINITION")
        if visumproj == "":
            wx.MessageBox(_("Please, set a coordinate projection for your VISUM model before using Google Maps."),
                          _("Error"), style=wx.ICON_ERROR)
            return

        # Check the datum and coordinate system for being according to WGS84:
        if visumproj != "GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.017453292519943295]]":

            # set up proj.4 library to convert from this projection
            # first get the proj.4 identification string for the current VISUM projection
            # The gdal.osr library can do this conversion between identification strings
            sr = osr.SpatialReference(wkt=visumproj)
            proj4 = sr.ExportToProj4()
            try:
                p = pyproj.Proj(proj4)
            except:
                wx.MessageBox(_("No transformation could be set up for the coordinate projection in the VISUM model. Try switching to WGS_1984 manually in Network - Parameters."),
                                  _("Error"), style=wx.ICON_ERROR)
                return

            #convert
            try:
                lon,lat = p(x, y, inverse=True) # inverse means: FROM specific projection TO WGS_1984
            except:
                wx.MessageBox(_("No transformation could be set up for the coordinate projection in the VISUM model. Try switching to WGS_1984 manually in Network - Parameters."),
                              _("Error"), style=wx.ICON_ERROR)
                return
        else:
            lon = x
            lat = y

        # check for valid lat/lon

        
        if (not -180 <= lon <= 180) or (not -90 <= lat <= 90):

            wx.MessageBox(_("Transformed coordinates are out of range."),
                          _("Error"), style=wx.ICON_ERROR)



            return

        # build URL for Google Maps and display map in browser
        zoom = int(self.spin_ctrl_1.GetValue())
        URL = r"http://maps.google.de/maps?ll=%f,%f&z=%d&t=k&output=embed" % (lat,lon,zoom)
        try:
            os.startfile(URL) # will start the program for ".htm" as mapped in Windows Explorer
        except:
            wx.MessageBox(_("The map could not be displayed in the browser. Is a browser set up on your computer?"),
                          _("Error"), style=wx.ICON_ERROR)
            return

    def OnClose(self, event): # wxGlade: MyDialog.<event_handler>
        self.Destroy()

    def OnHelp(self, event): # wxGlade: MyDialog.<event_handler>
        os.startfile("Help.htm")


# end of class MyDialog

import gettext
gettext.install("GoogleMaps",".\\locale") # replace with the appropriate catalog name
languagemap = { "DEU" : 'de_de' }
code = languagemap.get(Visum.GetCurrentLanguage(), 'en_us') # if language not available, use English
translation = gettext.translation("GoogleMaps", "./locale", languages=[code])
translation.install()


app = wx.PySimpleApp(0)
wx.InitAllImageHandlers()
dialog_1 = MyDialog(None, -1, "")
app.SetTopWindow(dialog_1)
dialog_1.Show()
app.MainLoop()
